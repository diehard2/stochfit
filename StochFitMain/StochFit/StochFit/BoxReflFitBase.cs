using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using StochasticModeling.Settings;
using System.Globalization;
using System.Threading;
using System.Drawing;
using ZedGraph;

#pragma warning disable 1591

namespace StochasticModeling
{
    public class BoxReflFitBase : Form
    {
        /// <summary>
        /// Generates a reflectivity using the Nevot-Croce correction to the Parratt recursion
        /// </summary>
        /// <param name="InitStruct"></param>
        /// <param name="parameters"></param>
        /// <param name="parametersize"></param>
        /// <param name="ReflectivityMap"></param>
        [DllImport("LevMardll.dll", EntryPoint = "FastReflGenerate", ExactSpelling = false, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
        protected static extern void FastReflGenerate(BoxModelSettings InitStruct, double[] parameters, int parametersize, double[] ReflectivityMap);

        /// <summary>
        /// Performs a Levenberg-Marquadt least squares fit of Reflectivity data
        /// </summary>
        /// <param name="InitStruct"></param>
        /// <param name="parameters"></param>
        /// <param name="covar"></param>
        /// <param name="covarsize"></param>
        /// <param name="info"></param>
        /// <param name="infosize"></param>
        /// <returns></returns>
        [DllImport("LevMardll.dll", EntryPoint = "FastReflfit", ExactSpelling = false, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
        protected static extern double FastReflfit([MarshalAs(UnmanagedType.LPStruct)] BoxModelSettings InitStruct, double[] parameters, double[] covar, int covarsize, double[] info, int infosize);

       /// <summary>
       /// Generates a smoothed and box electron density profile
       /// </summary>
       /// <param name="InitStruct"></param>
       /// <param name="parameters"></param>
       /// <param name="parametersize"></param>
       /// <param name="ED"></param>
       /// <param name="BoxED"></param>
        [DllImport("LevMardll.dll", EntryPoint = "RhoGenerate", ExactSpelling = false, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
        protected static extern void RhoGenerate(BoxModelSettings InitStruct, double[] parameters, int parametersize, double[] ED, double[] BoxED);

       /// <summary>
       ///  Fits an electron density profile to the electron density profile generated by the model independent fit
       /// </summary>
       /// <param name="InitStruct"></param>
       /// <param name="parameters"></param>
       /// <param name="covar"></param>
       /// <param name="covarsize"></param>
       /// <param name="info"></param>
       /// <param name="infosize"></param>
       /// <returns></returns>
        [DllImport("LevMardll.dll", EntryPoint = "Rhofit", ExactSpelling = false, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
        protected static extern double Rhofit([MarshalAs(UnmanagedType.LPStruct)] BoxModelSettings InitStruct, double[] parameters, double[] covar, int covarsize, double[] info, int infosize);


        /// <summary>
        /// Performs a stochastic search of the parameter space using a constrained Levenberg-Marquadt least squares 
        /// minimization
        /// </summary>
        /// <param name="InitStruct"></param>
        /// <param name="parameters"></param>
        /// <param name="covar"></param>
        /// <param name="covarsize"></param>
        /// <param name="info"></param>
        /// <param name="infosize"></param>
        [DllImport("LevMardll.dll", EntryPoint = "StochFit", ExactSpelling = false, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)]
        protected static extern void ConstrainedStochFit([MarshalAs(UnmanagedType.LPStruct)] BoxModelSettings InitStruct, double[] parameters, double[] covar, int paramsize, double[] info, int infosize, double[] ParamArray, double[] chisquarearray, ref int paramarraysize);
        
        
        /// <summary>
        /// The culture is set to US for the purposes of inputting data to the numerical routines
        /// </summary>
        protected CultureInfo m_CI = new CultureInfo("en-US");


        #region Variables
        protected double m_roughness = 3;
        protected bool m_bvalidfit = false;
        protected bool m_bUseSLD = false;
        protected Graphing ReflGraphing;
        protected Graphing RhoGraphing;
        //Arrays
        protected double[] RhoArray;
        protected double[] LengthArray;
        protected double[] SigmaArray;
        protected double[] PreviousRhoArray;
        protected double[] PreviousLengthArray;
        protected double[] PreviousSigmaArray;
        protected double[] covar;
        protected double[] info;
        protected double oldnormfactor;
        protected double previoussigma;
        protected bool initialized = false;
        protected List<TextBox> BoxSigmaArray;
        protected List<TextBox> BoxRhoArray;
        protected List<TextBox> BoxLengthArray;
        protected List<TextBox> SubphaseRoughness;
        protected TextBox NormalizationFactor;
        protected double[] Qincrement;
        protected double[] QErrors;
        protected double[] ReflectivityMap;
        protected double[] Z;
        protected double[] ElectronDensityArray;
        protected double[] BoxElectronDensityArray;
        protected double[] RealReflErrors;
        protected double[] RealRefl;
        protected bool m_bmodelreset = false;
        protected BoxModelSettings InfoStruct;
        protected Thread Stochthread;
        private CheckBox Holdsigma;
        private TextBox BoxCount;

    #endregion

        public BoxReflFitBase(double[] Z, double[] ERho, double roughness, string leftoffset, string subsld, string supsld)
        {

        
        }


        public BoxReflFitBase(double roughness, double[] inLength, double[] inRho, double[] inSigma, int boxnumber, bool holdsigma, string subphase, string superphase)
        {
            InfoStruct = new BoxModelSettings();
            m_roughness = roughness;
            m_bUseSLD = Properties.Settings.Default.UseSLDSingleSession;
            
            MakeArrays();
            RhoArray = new double[6];
            LengthArray = new double[6];
            SigmaArray = new double[6];
            RhoArray = (double[])inRho.Clone();
            LengthArray = (double[])inLength.Clone();
            SigmaArray = (double[])inSigma.Clone();
            info = new double[9];

            //Setup arrays to hold the old values
            PreviousRhoArray = new double[6];
            PreviousLengthArray = new double[6];
            PreviousSigmaArray = new double[6];

            //Get our Q data into a useable form
            Qincrement = ReflData.Instance.GetQData;
            RealRefl = ReflData.Instance.GetReflData;
            RealReflErrors = ReflData.Instance.GetRErrors;
            QErrors = ReflData.Instance.GetQErrors;

            ReflectivityMap = new double[ReflData.Instance.GetNumberDataPoints];

            //Create Z
            Z = new double[500];
            ElectronDensityArray = new double[500];
            BoxElectronDensityArray = new double[500];

            //Make the Z Arrays
            double length = 0;

            for (int k = 0; k < boxnumber; k++)
            {
                length += LengthArray[k];
            }
            for (int i = 0; i < 500; i++)
            {
                Z[i] = i * (50 + length) / 499.0;
            }

         
        }

















        /// <summary>
        /// Checks to verify that the Textbox has valid numerical input. This check respects cultural variations
        /// in number entry
        /// </summary>
        /// <param name="sender">A textbox is expected as input</param>
        /// <param name="e">return true if the number can be cast to a double or false if not</param>
        protected virtual void ValidateNumericalInput(object sender, System.ComponentModel.CancelEventArgs e)
        {
            try
            {
                base.OnValidating(e);
                Double.Parse(((TextBox)sender).Text);
            }
            catch
            {
                MessageBox.Show("Error in input - A real number was expected");
                e.Cancel = true;
            }
        }

        /// <summary>
        /// Checks to verify that the Textbox has valid numerical input. This check respects cultural variations
        /// in number entry 
        /// </summary>
        /// <param name="sender">A textbox is expected as input</param>
        /// <param name="e">return true if the number can be cast to an integer or false if not</param>
        protected virtual void ValidateIntegerInput(object sender, System.ComponentModel.CancelEventArgs e)
        {
            try
            {
                base.OnValidating(e);
                Convert.ToInt32(((TextBox)sender).Text);
            }
            catch
            {
                MessageBox.Show("Error in input - An integer was expected");
                e.Cancel = true;
            }
        }

        protected virtual void MakeArrays()
        {

        }


        protected virtual void ChangeRoughnessArray(double rough, ref TextBox t)
        {
            t.Text = rough.ToString();
            BoxSigmaArray.ForEach(p => p.Text = rough.ToString());
        }

        protected virtual void UpdateProfile()
        {
            m_bvalidfit = false;



            double[] parameters = null;


           // MakeParameters(ref parameters, false);
            //Generare Reflectivity and ED          
            FastReflGenerate(InfoStruct, parameters, parameters.Length, ReflectivityMap);

            if (m_bmodelreset == true)
            {
                ReflGraphing.Clear();
                ReflGraphing.LoadDatawithErrorstoGraph("Reflectivity Data", Color.Black, SymbolType.Circle, 5, ReflData.Instance.GetQData, ReflData.Instance.GetReflData);
                m_bmodelreset = false;
            }

            //Setup the graphs
            ReflGraphing.LoadfromArray("modelrefl", Qincrement, ReflectivityMap, System.Drawing.Color.Black, SymbolType.XCross, 4, true, string.Empty);
            RhoGraphing.LoadfromArray("Model Dependent Fit", Z, ElectronDensityArray, System.Drawing.Color.Turquoise, SymbolType.None, 0, true, string.Empty);
            RhoGraphing.LoadfromArray("Model Dependent Box Fit", Z, BoxElectronDensityArray, System.Drawing.Color.Red, SymbolType.None, 0, false, string.Empty);
        }

        protected void MakeParameters(ref double[] parameters, bool IsED, bool onesigma, int boxcount,
          double normcorrection, double subrough)
        {
            int arrayconst = 0;
            int EDconst = 0;

            if (onesigma)
                arrayconst = 2;
            else
                arrayconst = 3;


            //consts - # of boxes, subphase SLD,
            //variable - Subphase sigma (just one to start), Rho1, length1, Rho2, length2, Z-offset

            //Let's set up our parameter order for a system with only one roughness (elastic sheet)
            // 0 - Subphase roughness, 2 - 3 Layer 1 Values (Length, Rho), 4 - 5 Layer 2 Values, 6 - 7 Layer 3 Values
            // 8 - 9 Layer 4 Values, 10 - 11 Layer 5 Values, 11 - 13 Layer 6 Values. The last box will be our imperfect
            // normalization factor

            //We have to hold the # of boxes and the subphase SLD constant, or else 
            //the fit will wildly diverge
            if (IsED)
            {
                parameters = new double[arrayconst + 1 + boxcount * 2];
                parameters[1] = 25;
                EDconst++;
            }
            else
            {
                parameters = new double[arrayconst + boxcount * 2];
            }

            parameters[0] = subrough ;


            for (int i = 0; i < boxcount; i++)
            {
                parameters[arrayconst * i + 1 + EDconst] = LengthArray[i];
                parameters[arrayconst * i + 2 + EDconst] = RhoArray[i];

                if (!onesigma)
                    parameters[3 * i + 3 + EDconst] = SigmaArray[i];
            }

            if (!IsED)
                parameters[1 + boxcount * arrayconst] = normcorrection;


            SetInitStruct(ref InfoStruct, null, null, null);
        }

        protected virtual void SetInitStruct(ref BoxModelSettings InitStruct, double[] parampercs, double[] UL, double[] LL)
        {

        }

        protected void  GreyFields()
        {

            for (int i = 0; i < 6; i++)
            {
                if (i < int.Parse(BoxCount.Text))
                {
                    BoxLengthArray[i].Enabled = true;
                    BoxRhoArray[i].Enabled = true;

                    if (Holdsigma.Checked)
                        BoxSigmaArray[i].Enabled = false;
                    else
                        BoxSigmaArray[i].Enabled = true;
                }
                else
                {
                    BoxLengthArray[i].Enabled = false;
                    BoxRhoArray[i].Enabled = false;
                    BoxSigmaArray[i].Enabled = false;
                }
            }
        }
    }
}

